// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	internal "github.com/Netflix-Clone-MicFlix/User-Service/internal"
	amqp "github.com/streadway/amqp"
	mock "github.com/stretchr/testify/mock"
)

// UserConsumer is an autogenerated mock type for the UserConsumer type
type UserConsumer struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: _a0, _a1
func (_m *UserConsumer) CreateUser(_a0 string, _a1 internal.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, internal.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: _a0, _a1
func (_m *UserConsumer) DeleteUser(_a0 string, _a1 internal.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, internal.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserServiceEvents provides a mock function with given fields: _a0, _a1
func (_m *UserConsumer) NewUserServiceEvents(_a0 amqp.Channel, _a1 internal.User) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(amqp.Channel, internal.User) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(amqp.Channel, internal.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// handleUserServiceEvents provides a mock function with given fields: _a0, _a1
func (_m *UserConsumer) handleUserServiceEvents(_a0 amqp.Delivery, _a1 internal.User) {
	_m.Called(_a0, _a1)
}
