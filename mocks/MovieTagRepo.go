// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Netflix-Clone-MicFlix/User-Service/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MovieTagRepo is an autogenerated mock type for the MovieTagRepo type
type MovieTagRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *MovieTagRepo) Create(_a0 context.Context, _a1 string) (entity.MovieTag, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.MovieTag
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.MovieTag); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.MovieTag)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MovieTagRepo) Delete(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: _a0
func (_m *MovieTagRepo) GetAll(_a0 context.Context) ([]entity.MovieTag, error) {
	ret := _m.Called(_a0)

	var r0 []entity.MovieTag
	if rf, ok := ret.Get(0).(func(context.Context) []entity.MovieTag); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MovieTag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0, _a1
func (_m *MovieTagRepo) GetById(_a0 context.Context, _a1 string) (entity.MovieTag, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.MovieTag
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.MovieTag); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.MovieTag)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1, _a2
func (_m *MovieTagRepo) Update(_a0 context.Context, _a1 string, _a2 entity.MovieTag) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.MovieTag) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
